#!/bin/sh

set -eu

validate-commits
echo

: ${RELEASE_BRANCH:=main}

TAG_PREFIX=v
COMMIT="$(git rev-parse --short HEAD)"
BRANCH="$(git rev-parse --abbrev-ref HEAD)"
CURVER="$(git-sv current-version)"
NXTVER="$(git-sv next-version)"
CHANGELOG="$(git-sv release-notes)"
ISRELEASE=
ISPUSHTAG=false

if echo "$GIT_REF" | grep -Eq '^refs/tags/'"${TAG_PREFIX}"'[0-9]+(\.[0-9]+(\.[0-9]+)?)?(-[a-z0-9\.\-_]+)?$'; then
	# Derive version from manually pushed tag
	NXTVER=$(echo "$GIT_REF" | sed -E 's!^refs/tags/'"${TAG_PREFIX}"'([0-9]+(\.[0-9]+(\.[0-9]+)?)?(-[a-z0-9\.\-_]+)?)$!\1!')
	GIT_TAG="${TAG_PREFIX}$NXTVER"

	ISRELEASE=true
	ISPUSHTAG=false
elif [ "$RELEASE_BRANCH" = "$BRANCH" -a "$AUTO_RELEASE" = true ]; then
	if [ "$CURVER" = "$NXTVER" ] || [ "$(echo "$CHANGELOG" | wc -l)" -eq 1 ]; then
		echo 'Skipping release since no commit found that needs to be released'
		echo
	else
		ISRELEASE=true
		ISPUSHTAG=true

		git config user.name "${GITHUB_ACTOR}"
		git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

		GIT_TAG="${TAG_PREFIX}$NXTVER"
		MSG="$(printf 'chore(release): %s [skip ci]\n\n%s\n' "$NXTVER" "$CHANGELOG")"
		git tag -a "$GIT_TAG" -m "$MSG"
	fi
else
	NXTVER="$(printf %s-dev-%s "$NXTVER" "$COMMIT")"

	REASON="not on the release branch '$RELEASE_BRANCH' but '$BRANCH'"
	[ "$AUTO_RELEASE" = true ] || REASON='auto-release=false and no matching tag was pushed manually'
	echo "Skipping release since $REASON"
	echo
fi

# Detect insecure credential usage
if grep -q AUTHORIZATION: .git/config; then
	echo '::warning title=Credentials persisted within .git/config::Storing git credentials within .git/config grants write access to all subsequent job steps! To reduce the attack surface, this should be avoided by e.g. using actions/checkout@v3 with `persist-credentials: false`.'
fi

# Set GitHub Action state (post-entrypoint to receive as env vars with prefix STATE_)
CHANGELOG_BASE64="$(echo "$CHANGELOG" | base64 -w 0)"
echo "VERSION=$NXTVER"             >> $GITHUB_STATE
echo "PUBLISH=$ISRELEASE"          >> $GITHUB_STATE
echo "PUSHTAG=$ISPUSHTAG"          >> $GITHUB_STATE
echo "CHANGELOG=$CHANGELOG_BASE64" >> $GITHUB_STATE

# Set GitHub Action outputs
echo version="$NXTVER"  >> $GITHUB_OUTPUT
echo publish=$ISRELEASE >> $GITHUB_OUTPUT

# Export GitHub Action env vars for subsequent steps
echo "RELEASE_VERSION=$NXTVER"    >> $GITHUB_ENV
echo "RELEASE_PUBLISH=$ISRELEASE" >> $GITHUB_ENV

echo "version: $NXTVER"
echo "publish: $ISRELEASE"

if [ "$(echo "$CHANGELOG" | wc -l)" -gt 1 ]; then
	echo
	echo "CHANGELOG:"
	echo "$CHANGELOG"
fi
