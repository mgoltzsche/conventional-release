name: Release

on:
  push:
    branches:
    - main

    tags:
    - v*.*.*

  pull_request:
    branches:
    - main

# Ensure builds run sequentially per branch, cancel running PR/branch builds.
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# Grant write access to github.token.
# (On pull_request builds, github.token provides read-only permissions.)
permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        # To reduce the attack surface, don't expose the token to subsequent
        # steps implicitly, particularly not to custom, 3rd party build logic.
        # See https://github.com/actions/checkout/issues/485
        persist-credentials: false
        fetch-depth: 0

    - id: release
      name: Prepare release
      uses: ./ # mgoltzsche/conventional-release
      with:
        token: ${{ github.token }}
        github-release-draft: true
        update-major-tag: true
        commit-files: ./action.yml

    - name: Test release Action output
      run: |
        set -ux
        echo "$VERSION" | grep -Eq '[0-9]+\.[0-9]+\.[0-9]+(-[^ ]+)?'
        [ "$VERSION" = "$RELEASE_VERSION" ]
        EXPECT_PUBLISH=$(echo "$GITHUB_REF" | grep -Eq '^refs/tags/v' && echo true || echo)
        if [ "$GITHUB_REF" = refs/heads/main ]; then
          EXPECT_PUBLISH=$(git log --oneline -n1 | grep -Eq '(feat|fix):' && echo true || echo)
        fi
        [ "$PUBLISH" = "$EXPECT_PUBLISH" ]
        [ "$PUBLISH" = "$RELEASE_PUBLISH" ]
      env:
        VERSION: ${{ steps.release.outputs.version }}
        PUBLISH: ${{ steps.release.outputs.publish }}

    - name: Set up qemu
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all

    - name: Log into GitHub Container Registry
      if: steps.release.outputs.publish
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build (and push) container image
      run: |
        docker buildx create --use
        docker buildx build $PUSH --platform=$PLATFORMS -t $IMAGE .
        echo "IMAGE=$IMAGE" >> $GITHUB_ENV
      env:
        IMAGE: ghcr.io/${{ github.repository }}:${{ steps.release.outputs.version }}
        PLATFORMS: linux/arm64/v8,linux/amd64
        PUSH: ${{ steps.release.outputs.publish && '--push' || '' }}

    - name: Replace image reference within action.yml
      if: steps.release.outputs.publish
      run: |
        sed -Ei "s| image: Dockerfile| image: docker://${IMAGE}|" action.yml

